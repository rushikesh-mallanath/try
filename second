import tensorflow as tf 
from tensorflow  import keras
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt
%matplotlib inline
----------------------------------------------------

mnist =tf.keras.datasets.mnist 
(x_train,y_train),(x_test,y_test)=mnist.load_data()
----------------------------------------------------

plt.matshow(x_train[1])
print(mnist)
-----------------------------------------------------

x_train =x_train/255 
x_test=x_test/255
-----------------------------------------------------

x_train[0]

-----------------------------------------------------
model=keras.Sequential([keras.layers.Flatten(input_shape=(28,28)), keras.layers.Dense(128, activation='relu'), keras.layers.Dense(10,activation='softmax') ])
model.summary()
-----------------------------------------------------

model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
-----------------------------------------------------

history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=10)
-----------------------------------------------------

test_loss,test_acc=model.evaluate(x_test,y_test) 
print("Loss=%.3f" %test_loss) 
print("Accuracy=%.3f" %test_acc)
-----------------------------------------------------

import random 
n=random.randint(0,9999) 
plt.imshow(x_test[n]) 
plt.show 
prediction=model.predict(x_test) 
print("The handwritten number is %d" % np.argmax(prediction[n]))
-----------------------------------------------------

test_predict=model.predict(x_test)
test_predict_labels=np.argmax(test_predict,axis=1) 
confusion_matrix=tf.math.confusion_matrix(labels=y_test,predictions=test_predict_labels) 
print('Confusion Matrix of the test:\n', confusion_matrix)
